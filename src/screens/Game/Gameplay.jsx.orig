<<<<<<< Updated upstream
/* eslint-disable react/display-name */
import "react-native-gesture-handler";
import React from "react";
=======
/* eslint-disable no-alert */
import "react-native-gesture-handler";
import React, { useState } from "react";
>>>>>>> Stashed changes
import { View, Text, StyleSheet } from "react-native";
import { Button } from "react-native-elements";
import PropTypes from "prop-types";
import PauseButton from "../../components/ProgressBar";
import getProblem from "../../scripts/game-logic";

const styles = StyleSheet.create({
  root: {
    flex: 1,
<<<<<<< Updated upstream
    alignContent: "center",
    backgroundColor: "#f5f5f5",
    marginVertical: 30,
    marginHorizontal: 30,
  },
  text: {
    textAlign: "center",
    fontSize: 20,
    marginVertical: 30,
  },
  button: {
    borderRadius: 10,
    marginTop: 20,
  },
  pause: {
    // alignContent: "space-between",
    borderRadius: 10,
  },
});

function Gameplay({ navigation }) {
  React.useLayoutEffect(() => {
    navigation.setOptions({
      headerRight: () => (
        <Button
          titleStyle={{
            color: "white",
            fontSize: 16,
          }}
          buttonStyle={styles.pause}
          onPress={() => navigation.navigate("Pause")} title="Pause"
        />
      ),
    });
  }, [navigation]);
  return (
    <View style={styles.root}>
      <Text style={styles.text}>Game Play</Text>
      <Button
        title="Go to Intermediate Level"
        buttonStyle={styles.button}
        onPress={() => navigation.navigate("GameplayIntermediate")}
=======
    backgroundColor: "#fff",
  },
  expressionText: {
    fontSize: 50,
    fontWeight: "bold",
    paddingBottom: 40,
  },
  textContainer: {
    flex: 1,
    paddingTop: 30,
    justifyContent: "center",
    backgroundColor: "#eaeaea",
    flexDirection: "row",
    flexWrap: "wrap",
    alignItems: "center",
    textAlign: "center",
  },
  container: {
    flex: 3,
    paddingBottom: 50,
    paddingLeft: 10,
    paddingRight: 10,
    justifyContent: "space-around",
    flexDirection: "row",
    backgroundColor: "#eaeaea",
    flexWrap: "wrap",
    alignContent: "stretch",
  },
  button: {
    width: 99,
    height: 99,
    backgroundColor: "rgba(0, 138, 252, 0.2)",
    borderRadius: 25,
    marginTop: 20,
    alignSelf: "center",
  },
  buttonTitle: {
    textAlign: "center",
    fontSize: 40,
    fontWeight: "100",
    color: "#2f4f4f",
  },
});

function Gameplay() {
  const [problem, setProblem] = useState(getProblem());

  function getNewProblem() {
    setProblem(getProblem());
  }

  function checkAnswer(choiceValue) {
    if (choiceValue === problem.solution) {
      alert(`Correct!`);
    } else {
      alert(`Try Again.`);
    }
    getNewProblem();
  }

  const choicesArray = problem.choices;
  const choices = choicesArray.map((choiceValue, choiceKey) => {
    return (
      <Button
        key={choiceKey}
        buttonStyle={styles.button}
        title={`${choiceValue}`}
        titleStyle={styles.buttonTitle}
        onPress={() => checkAnswer(choiceValue)}
>>>>>>> Stashed changes
      />
    );
  });

  return (
    <View style={styles.root}>
      <View style={styles.textContainer}>
        <Text style={styles.expressionText}>{problem.expression}</Text>
      </View>
      <View style={styles.container}>{choices}</View>
    </View>
  );
}

Gameplay.navigationOptions = ({ navigation }) => ({
  headerRight: <PauseButton onPress={() => navigation.navigate("Pause")} />,
});

Gameplay.propTypes = {
  navigation: PropTypes.object,
};

export default Gameplay;
